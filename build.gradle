apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

group = 'org.xblackcat.sjpu'
def projectTitle = 'SJPU Runtime class builder'

version = new File('build.txt').getText('UTF-8')
ext.commonManifest = java.manifest {
    attributes(
            "Implementation-Title": projectTitle,
            "Implementation-Version": version
    )
}

jar {
    manifest = java.manifest {
        from commonManifest
    }
}

defaultTasks 'clean', 'buildAll'

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.apache.commons:commons-text:[1.10.0,2.0)'
    api 'commons-logging:commons-logging:[1.2,2.0)'
    api 'org.javassist:javassist:[3.29.2-GA,4.0)'

    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:[2.20.0,3.0)'
    testRuntimeOnly 'org.apache.logging.log4j:log4j-jcl:[2.20.0,3.0)'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
    manifest = java.manifest {
        from commonManifest
    }
}

javadoc {
    title = projectTitle
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.outputs.files
    archiveClassifier = 'javadoc'
    manifest = java.manifest {
        from commonManifest
    }
}

//[compileJava, compileTestJava]*.options.collect {options ->
//  options.deprecation = true
//  options.compilerArgs.add '-Xlint'
//  options.compilerArgs.add '-Xlint:-unchecked'
//  options.compilerArgs.add '-Xlint:-serial'
//  options.compilerArgs.add '-Xlint:-rawtypes'
//}

test {
    useJUnitPlatform()
}

tasks.register('sourcesZip', Zip) {
    from project.projectDir
    include 'src/**'
    include 'test/**'
    include 'build.*'
    include 'LICENSE'
    into('lib') {
        from configurations.testRuntimeClasspath
        include '*'
    }
    archiveClassifier = 'sources'
}

tasks.register('binZip', Zip) {
    dependsOn 'jar'
    from jar.outputs.files
    into('dep') {
        from configurations.runtimeClasspath
    }
    archiveClassifier = 'bin'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = projectTitle
                packaging = 'jar'
                description = 'Helper for build generator to implement class logic in runtime basing on interface/methods/annotations'
                url = 'https://github.com/xBlackCat/sjpu-rcb'

                scm {
                    url = 'scm:git@github.com:xBlackCat/sjpu-rcb.git'
                    connection = 'scm:git@github.com:xBlackCat/sjpu-rcb.git'
                    developerConnection = 'scm:git@github.com:xBlackCat/sjpu-rcb.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'xBlackCat'
                        name = 'Zhukov Alexei'
                        email = 'xblackcat@gmail.com'
                    }
                }
            }

        }
    }
    repositories {
        mavenLocal()
        maven {
            url = mavenCentralUrl
            credentials {
                username = mavenCentralUser
                password = mavenCentralPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


tasks.register('buildAll') {
    dependsOn 'build', 'sourcesJar', 'binZip', 'sourcesZip', 'javadocJar'
}